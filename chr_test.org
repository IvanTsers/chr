#+begin_export latex
\section{Testing}
We import the \texttt{testing} package and add hooks for further
imports and functions.
#+end_export
#+begin_src go <<chr_test.go>>=
  package chr
  import (
	  "testing"
	  //<<Testing imports>>
  )
  //<<Auxillary functions>>
  //<<Testing functions>>
#+end_src
#+begin_export latex
\subsection{Method \ty{Homologs.sort}}
To test \ty{sort}, we generate pseudorandom segments, initialize a
\ty{Homologs} struct, call the method, and compare actual and expected
values. Thereafter, we test edge cases.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestSort(t *testing.T) {
	  //<<Generate pseudorandom segments>>
	  h := Homologs{S: segments, N: make(map[int]bool)}
	  //<<Sort the segments and compare values>>
	  //<<Edge case segments>>
  }
#+end_src
#+begin_export latex
We generate two arrays of pseudorandom integers and use them to
initialize a dozen new segments.
#+end_export
#+begin_src go <<Generate pseudorandom segments>>=
  var starts []int
  var segments []seg
  rand.Seed(time.Now().UnixNano())
  for i := 0; i < 12; i++ {
	  rs := rand.Intn(1000000000)
	  rl := 1 + rand.Intn(999999999)
	  starts = append(starts, rs)
	  segments = append(segments, newSeg(rs, rl))
  }
#+end_src
#+begin_export latex
We import \ty{rand} and \ty{time}.
#+end_export
#+begin_src go <<Testing imports>>=
  "math/rand"
  "time"
#+end_src
#+begin_export latex
We sort the segments using \ty{sort} and the starts using the
\ty{sort.Ints} function from the standard \ty{Go} library. Then we
compare the first, the median, and the last element.
#+end_export
#+begin_src go <<Sort the segments and compare values>>=
  hSorted := h.sort()
  sort.Ints(starts)
  for _, i := range([3]int{0, 5, 11}) {
	  want := starts[i]
	  get := hSorted.S[i].s
	  if want != get {
		  t.Errorf("want:\n%d\nget:\n%d\n",
		  want, get)
	  }
  }
#+end_src
#+begin_export latex
We import \ty{sort}.
#+end_export
#+begin_src go <<Testing imports>>=
  "sort"
#+end_src
#+begin_export latex
Edge case slices of segments include:
\begin{itemize}
  \itemsep0em
\item an empty slice;
\item a slice of a single element;
\item a slice of identical elements;
\item an already sorted slice.
\end{itemize}
To test for these, we declare a struct of test cases and iterate over
it.
#+end_export
#+begin_src go <<Edge case segments>>=
  x := newSeg(12, 221)
  testCases := []struct {
	  name string
	  input []seg
	  want []seg
  }{
	  {"Empty", []seg{}, []seg{}},
	  {"Single element", []seg{x},[]seg{x}},
	  {"Identical", []seg{x, x, x, x}, []seg{x, x, x, x}},
	  {"Already sorted", hSorted.S, hSorted.S},	
  }

  for _, tc := range testCases {
	  //<<Run sort test case>>
  }
#+end_src
#+begin_export latex
We test \ty{sort} and compare the results to the expected values.
#+end_export
#+begin_src go <<Run sort test case>>=
  t.Run(tc.name, func(t *testing.T) {
	  h.S = tc.input
	  hSort := h.sort()
	  get := hSort.S
	  if !reflect.DeepEqual(get, tc.want) {
		  t.Errorf("want:\n%v\nget:\n%v\n",
			  tc.want, get)
	  }
  })
#+end_src
#+begin_export latex
We import \ty{reflect}.
#+end_export
#+begin_src go <<Testing imports>>=
  "reflect"
#+end_src
#+begin_export latex
\subsection{\ty{Homologs.filterOverlaps}}
We create a number of segments to test the method \ty{filterOverlaps},
create a struct of test cases, and tun the tests.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestFilterOverlaps(t *testing.T) {
	  //<<Declare test segments>>
	  testCases := []struct {
		  name string
		  input []seg
		  want []seg
	  }{
		  //<<Test cases for TestFilterOverlaps>>
	  }
		  for _, tc := range testCases {
			  //<<Run TestFilterOverlaps test case>>
		  }
  }
#+end_src
#+begin_export latex
We declare ten test segments.
#+end_export
#+begin_src go <<Declare test segments>>=
  x := newSeg(0, 10)
  y := newSeg(5, 10)
  z := newSeg(5, 20)
  a := newSeg(21, 2)
  b := newSeg(25, 5)
  c := newSeg(27, 1)
  d := newSeg(30, 5)
  e := newSeg(35, 10)
  f := newSeg(50, 2)
  g := newSeg(0, 5)
#+end_src
#+begin_export latex
We describe the test cases:
\begin{itemize}
  \itemsep0em
\item an empty input;
\item one homology;
\item two non-overlapping homologs;
\item two perfectly overlapping homologs;
\item two partially overlapping homologs of same length;
\item two partially overlapping homologs of different length;
\item a set of sorted ten homologs combining the prevous three cases.
\end{itemize}
#+end_export
#+begin_src go <<Test cases for TestFilterOverlaps>>=
  {"Empty", []seg{}, []seg{}},
  {"Sinlge", []seg{x}, []seg{x}},
  {"No overlap", []seg{x, f}, []seg{x, f}},
  {"Perfect overlap", []seg{x, x}, []seg{x}},
  {"Partial overlap same len", []seg{x, y}, []seg{x}},
  {"Partial overlap diff len", []seg{x, z}, []seg{z}},
  {"Various", []seg{g, x, y, z, a, b, c, d, e, f},
	  []seg{g, z, b, d, e, f}},
#+end_src
#+begin_export latex
We run the tests and compare the actual output to the expected values.
#+end_export
#+begin_src go <<Run TestFilterOverlaps test case>>=
  t.Run(tc.name, func(t *testing.T) {
	  h := Homologs{S: tc.input, N: make(map[int]bool)}
	  h.filterOverlaps()
	  get := h.S
	  if !reflect.DeepEqual(get, tc.want) {
		  t.Errorf("\nwant:\n%v\nget:\n%v\n",
			  tc.want, get)
	  }
  })
#+end_src
#+begin_export latex
\subsection{\ty{findHomologs}}
We test \ty{findHomologs} on several test sequences. Test cases
combine two parameters: 1) number of contigs in subject and query, and
2) number of matching regions.  We define the test cases and iterate
over them.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestFindHomologs (t *testing.T) {
	  //<<Desired findHomologs outputs>>
	  testCases := []struct {
		  name string
		  input string
		  want []*fasta.Sequence
	  }{
		  //<<Test cases for TestFindHomologs>>
	  }
	  for _, tc := range testCases {
		  //<<Run TestFindHomologs test cases>>
	  }
  }
#+end_src
#+begin_export latex
We import \ty{fasta}.
#+end_export
#+begin_src go <<Testing imports>>=
  "github.com/evolbioinf/fasta"
#+end_src
#+begin_export latex
We test \ty{findHomologs} on input sequences covering ten cases
(Table~\ref{tab:testCasesFH})

\begin{table}[H]
  \centering
  \caption{Test inputs for \ty{findHomologs}. $S$, subject, $Q$,
    query, $c1$ and $c2$, contigs 1 and 2, $N$, substitutions. All
    coordinates are 0-based.}
  \begin{tabular}{l l l l l}
    \hline
    Case&$S$ markers&$Q$ markers\\
    \hline
    \ty{identical}&$c1[0:5000]$&$c1[0:5000]$\\
    \hline
    \ty{tooDistant}&$c1[none]$&$c1[none]$\\
    \hline
    \ty{s1q1}&$c1[1000:1500]$&$c1[1000:1500]$\\
    \hline
    \ty{s1q2a}&$c1[1000:1500]$&$c1[1000:1500], c2[none]$\\
    \hline
    \ty{s1q2b}&$c1[1000:1500]$&$c1[1000:1500], c2[500:1000]$\\
    \hline
    \ty{s2q1a}&$c1[1000:1500], c2[none]$&$c1[1500:2000]$\\
    \hline
    \ty{s2q1b}&$c1[1000:1200], c2[3000:3500]$&$c1[1500:1700], c1[2500:3000]$\\
    \hline
    \ty{s2q2}&$c1[100:400], c2[100:200]$&$c1[200:300], c2[400:700]$\\
    \hline
    \ty{onEnds}&$c1[0:500], c1[1000:1500]$&$c1[0:500], c1[1100:1600]$\\
    \hline
    \ty{mutations}&$c1[500:1000]$&$c1[500:1000]$, $N\{16,17,66,291,387\}$\\
  \end{tabular}
  \label{tab:testCasesFH}
\end{table}
We will compare the output of \ty{findHomologs} to results of
\ty{phylonium -p}, a program based on the same algorithms and logic as
our own function~\cite{kloe19:phy}. We read \ty{fasta} files produced
by a run of \ty{phylonium} with the cases from
Table~\ref{tab:testCasesFH}.
#+end_export
#+begin_src go <<Desired findHomologs outputs>>=
  identical := readFasta("data/o/identical.fasta")
  tooDistant := readFasta("data/o/tooDistant.fasta")
  s1q1 := readFasta("data/o/s1q1.fasta")
  s1q2a := readFasta("data/o/s1q2a.fasta")
  s1q2b := readFasta("data/o/s1q2b.fasta")
  s2q1a := readFasta("data/o/s2q1a.fasta")
  s2q1b := readFasta("data/o/s2q1b.fasta")
  s2q2 := readFasta("data/o/s2q2.fasta")
  onEnds := readFasta("data/o/onEnds.fasta")
  mutations := readFasta("data/o/mutations.fasta")
#+end_src
#+begin_export latex
We define the function \ty{readFasta}, which opens a file and calls
\ty{fastautils.ReadAll} on it.
#+end_export
#+begin_src go <<Auxillary functions>>=
  func readFasta(path string) []*fasta.Sequence {
	  f, _ := os.Open(path)
	  contigs := fastautils.ReadAll(f)
	  f.Close()
	  return contigs
  }
#+end_src
#+begin_export latex
We import \ty{os}.
#+end_export
#+begin_src go <<Testing imports>>=
  "os"
#+end_src
#+begin_export latex
We define the test cases.
#+end_export
#+begin_src go <<Test cases for TestFindHomologs>>=
  {"identical", "identical.fasta", identical},
  {"tooDistant", "tooDistant.fasta", tooDistant},
  {"s1q1", "s1q1.fasta", s1q1},
  {"s1q2a", "s1q2a.fasta", s1q2a},
  {"s1q2b", "s1q2b.fasta", s1q2b},
  {"s2q1a", "s2q1a.fasta", s2q1a},
  {"s2q1b", "s2q1b.fasta", s2q1b},
  {"s2q2", "s2q2.fasta", s2q2},
  {"onEnds", "onEnds.fasta", onEnds},
  {"mutations", "mutations.fasta", mutations},
#+end_src
#+begin_export latex
The function \ty{prepareSubject} returns a struct of \ty{subject}. We
initialize the struct, read the contigs, normalize the subject's
contigs, process them, calculate the minimum anchor length, build an
ESA, and populate the struct.
#+end_export
#+begin_src go <<Auxillary functions>>=
  func prepareSubject(path string) subject {
	  var subject subject
	  r := readFasta(path)
	  //<<Normalize test contigs>>
	  //<<Process test contigs>>
	  //<<Calculate test minimum anchor length>>
	  //<<Build test subject's ESA>>
	  //<<Populate test \ty{subject}>>
	  return subject
  }
#+end_src
#+begin_export latex
We normalize the contigs using the method \ty{fasta.Clean}.
#+end_export
#+begin_src go <<Normalize test contigs>>=
  for i, _ := range r {
	  fastautils.Clean(r[i])
  }
#+end_src
#+begin_export latex
We import \texttt{fastautils}.
#+end_export
#+begin_src go <<Testing imports>>=
  "github.com/ivantsers/fastautils"
#+end_src
#+begin_export latex
We extract the \ty{Header} and \ty{Data} of the first subject
sequence. Then we use them to initialize the fields describing the
subject's contigs. Most likely, there will be more than one contig, so
we concatenate them.
#+end_export
#+begin_src go <<Process test contigs>>=
  subjectHeader := r[0].Header()
  subjectData := r[0].Data()
  contigHeaders := []string{subjectHeader}
  contigSegs := []seg{newSeg(0, len(subjectData))}
  cL := len(subjectData)
  if len(r) > 1 {
	  //<<Concatenate test subject's contigs>>
  }
#+end_src
#+begin_export latex
We traverse the slice of subject sequences, extract their headers and
data. We append the header to the slice of contig
headers. Then we append an exclamation mark to the combined subject
data and increase the total length by one. The new total length gives
us the start of the contig on the concatenated subject data. We create
a \ty{seg} and append it to the slice of contig segments. Finally, we
append the contig's data to the combined subject's data and increase
the total length.
#+end_export
#+begin_src go <<Concatenate test subject's contigs>>=
  for i := 1; i < len(r); i++ {
	  seq := r[i]
	  seqH := seq.Header()
	  seqD := seq.Data()
	  seqL := len(seqD)
	  contigHeaders = append(contigHeaders, seqH)
	  subjectData = append(subjectData, '!')
	  cL += 1
	  cseg := newSeg(cL, seqL)
	  contigSegs = append(contigSegs, cseg)
	  subjectData = append(subjectData, seqD...)
	  cL += seqL
  }
#+end_src
#+begin_export latex
We calculate the GC content in the subject and use it to find the
length of a non-random shustring.
#+end_export
#+begin_src go <<Calculate test minimum anchor length>>=
  atgc := 0.0
  gc := 0.0
  for _, c := range subjectData {
	  if c == 'A' || c == 'C' || c == 'G' || c == 'T' {
		  atgc++
		    if c == 'C' || c == 'G' {
			    gc++
		    }
	  }
  }
  gcContent := gc/atgc
  minAncLen := sus.Quantile(cL, gcContent, 0.975)
#+end_src
#+begin_export latex
We import \ty{sus}.
#+end_export
#+begin_src go <<Testing imports>>=
  "github.com/evolbioinf/sus"
#+end_src
#+begin_export latex
We calculate the reverse strand, append it to the subject, and build
an ESA.
#+end_export
#+begin_src go <<Build test subject's ESA>>=
  rev := fasta.NewSequence("reverse", subjectData)
  rev.ReverseComplement()
  subjectData = append(subjectData, rev.Data()...)
  sa := esa.MakeEsa(subjectData)
#+end_src
#+begin_export latex
We import \ty{esa}.
#+end_export
#+begin_src go <<Testing imports>>=
  "github.com/evolbioinf/esa"
#+end_src
#+begin_export latex
We populate the \ty{subject} object with the calculated values.
#+end_export
#+begin_src go <<Populate test \ty{subject}>>=
  subject.esa = sa
  subject.totalL = len(subjectData)
  subject.strandL = len(subjectData)/2
  subject.a = minAncLen
  subject.contigHeaders = contigHeaders
  subject.contigSegments = contigSegs
#+end_src
#+begin_export latex
The function \ty{prepareQuery} returns a struct of \ty{query}. We
initialize and populate a \ty{query} struct. We read all sequences
from it, then clean and concatenate them. Then we set the values of
the \ty{seq} and \ty{l} fields.
#+end_export
#+begin_src go <<Auxillary functions>>=
  func prepareQuery(path string) query {
	  var query query
	  q := readFasta(path)
	  for _, qc := range q {
		  fastautils.Clean(qc)
		  fastautils.DataToUpper(qc)
	  }
	  qSeq, _ := fastautils.Concatenate(q, 0)
	  query.seq = qSeq.Data()
	  query.l = len(qSeq.Data())
	  return query
  }
#+end_src
#+begin_export latex
For each test case we prepare the subject and the query, find
homologs, sort them, and filter overlaps. Then we convert \ty{seg}
slices into actual \ty{fasta} sequences and compare them to those
produced by \ty{phylonium} on the same input.
#+end_export
#+begin_src go <<Run TestFindHomologs test cases>>=
  t.Run(tc.name, func(t *testing.T) {
	  subject := prepareSubject("data/s/" + tc.input)
	  query := prepareQuery("data/q/" + tc.input)
	  h := findHomologs(query, subject)
	  h.filterOverlaps()
	  get := homologsToFasta(h, subject, false)
	  for i, g := range get {
		  fmt.Fprintln(os.Stderr, g.Header())
		  if !reflect.DeepEqual(g.Data(),
			  tc.want[i].Data()) {
			  t.Errorf("\nwant:\n%v\nget:\n%v\n",
				  string(tc.want[i].Data()),
				  string(g.Data()))
		  }
	  }
  })
#+end_src
#+begin_export latex
we import \ty{fmt}.
#+end_export
#+begin_src go <<Testing imports>>=
  "fmt"
#+end_src
#+begin_export latex
We have just also tested the function \ty{homologsToFasta} and the
integration between \ty{findHomologs}, \ty{sort}, and
\ty{filterOverlaps}.
#+end_export
#+begin_export latex
\subsection{\ty{pileToSeg and pileHeigths}}
We test the two functions on an imaginary ten-nucleotide-long subject,
for which a number of homologs are found in five query sequences
(Figure~\ref{fig:testCasesPile}).
\begin{figure}[H]
    \centering
    \includegraphics[width=0.65\linewidth]{figTestCasesPile.eps}
    \caption{Test input and intermediate results of the \ty{Intersect}
      function. A, homologous segments found in 5 query sequences,
      curly brackets hold the start and the length of the
      corresponding segments. B, Subject coverage with homologous
      segments ('pile heights'). The dashed line indicates an example
      threshold fraction of 80\%. With this threshold, positions with
      a pile heigth of at least 4 are to be included in the
      intersection. Solid vertical lines indicate the positions of
      adjacent segments, at which the intersection is forced to be
      split into two segments to avoid chimeric sequences.}
    \label{fig:testCasesPile}
\end{figure}
We initialize test \ty{Homologs}. Then we test \ty{pileHeights},
define test cases for \ty{pileToSeg} and run them.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestPileToSeg(t *testing.T) {
	  slen := 10
	  a := newSeg(0, 2)
	  b := newSeg(0, 3)
	  c := newSeg(1, 2)
	  d := newSeg(3, 5)
	  e := newSeg(5, 2)
	  f := newSeg(4, 4)
	  g := newSeg(8, 1)
	  segments := []seg{a, b, a, a, c,
		  d, f, e, e, f, g,
	  }
	  h := Homologs{S: segments, N: make(map[int]bool)}
	  //<<Test pileHeights>>
	  //<<Test cases for pileToSeg>>
	  for _, tc := range testCases {
		  //<<Run pileToSeg test cases>>
	  }
  }
#+end_src
#+begin_export latex
A unit test for \ty{pileHeights} consists of the definition of the
desired output, a call to \ty{pileHeights}, and comparison of the
actual output to the expected.
#+end_export
#+begin_src go <<Test pileHeights>>=
  t.Run("pileHeights", func(t *testing.T) {
	  want := []int{4, 5, 2, 1, 3, 5, 5, 3, 1, 0}
	  get := pileHeights(h, slen)
	  if !reflect.DeepEqual(want, get) {
		  t.Errorf("\nwant:\n%v\nget:\n%v\n", want, get)
	  }
  })
#+end_src
#+begin_export latex
We define the test cases for \ty{pileToSeg} using the example shown in
Figure~\ref{fig:testCasesPile}. These segments are to be tested with
sensitivity thresholds from 0\% to 100\%.
#+end_export
#+begin_src go <<Test cases for pileToSeg>>=
  zero := []seg{newSeg(0, 3), newSeg(3, 5), newSeg(8, 1)}
  forty := []seg{newSeg(0, 3), newSeg(4, 4)}
  sixty := []seg{newSeg(0, 2), newSeg(4, 4)}
  eighty := []seg{newSeg(0, 2), newSeg(5, 2)}
  hundred := []seg{newSeg(1, 1), newSeg(5, 2)}
  testCases := []struct {
	  name string
	  threshold float64
	  want []seg
  }{
	  {"0%", 0.0, zero},
	  {"10%", 0.1, zero},
	  {"20%", 0.2, zero},
	  {"40%", 0.4, forty},
	  {"60%", 0.6, sixty},
	  {"80%", 0.8, eighty},
	  {"90%", 0.9, eighty},
	  {"100%", 1.0, hundred},
  }
#+end_src
#+begin_export latex
For each test case we calculate pile heights, make an adjacency map,
interpret the threshold fraction, and convert pile heights to
segments. Then we compare the actual results with the anticipated
results.
#+end_export
#+begin_src go <<Run pileToSeg test cases>>=
  t.Run(tc.name, func(t *testing.T) {
	  want := tc.want
	  p := pileHeights(h, slen)
	  isAdj := makeMapAdj(h)
	  contigBounds := make(map[int]bool)
	  //<<Interpret the testing threshold fraction>>
	  get := pileToSeg(p, threshold, isAdj, contigBounds)
	  if !reflect.DeepEqual(want, get) {
		  t.Errorf("\nwant:\n%v\nget:\n%v\n", want, get)
	  }
  })
#+end_src
#+begin_export latex
There are always 5 query genomes in our test cases. We take the
testing threshold from a test case and calculate \ty{t}.
#+end_export
#+begin_src go <<Interpret the testing threshold fraction>>=
  threshold := int(math.Floor(tc.threshold * 5.0))
  if threshold == 0 {
	  threshold = 1
  }
#+end_src
#+begin_export latex
we import \ty{math}.
#+end_export
#+begin_src go <<Testing imports>>=
  "math"
#+end_src
#+begin_export latex
\subsection{\ty{Intersect}: SARS-CoV-2}
We emulate a real case workflow using the exported function
\ty{Intersect} applied to a set of simulated sequences and a set of
real genones.

There are two test cases: 1) ten 10kb target sequences generated by
\ty{stan} (\url{github.com/evolbioinf/stan}), 2) five random sequences
of SARS-CoV-2 obtained from the NCBI.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestIntersect(t *testing.T) {
	  stan := readFasta("data/o/stan.fasta")
	  sars := readFasta("data/o/sars.fasta")

	  testCases := []struct {
		  name string
		  input string
		  want []*fasta.Sequence
	  }{
		  {"stan", "data/i/stan/*", stan},
		  {"sars", "data/i/sars/*", sars},
	  }

	  for _, tc := range testCases {
		  //<<Run TestIntersect test cases>>
	  }
  }
#+end_src
#+begin_export latex
We read the reference, always \ty{t1.fasta}. We set \ty{Parameters}
and call \ty{Intersect} with those \ty{Parameters}. We compare the
results to the output of \ty{phylonium -p}. As \ty{phylonium} can only
return complete intersections, we use \ty{Intersect} with the 100\%
sensitivity threshold.
#+end_export
#+begin_src go <<Run TestIntersect test cases>>=
  t.Run(tc.name, func(t *testing.T) {
	  want := tc.want
	  r := readFasta("data/i/" + tc.name + "/t1.fasta")
	  parameters := Parameters{
		  Reference: r,
		  QueryPaths: []string{
			  "data/i/" + tc.name + "/t/t2.fasta",
			  "data/i/" + tc.name + "/t/t3.fasta",
			  "data/i/" + tc.name + "/t/t4.fasta",
			  "data/i/" + tc.name + "/t/t5.fasta",
		  },
		  ShustrPval: 0.975,
		  Threshold: 1.0,
		  PrintN: false,
	  }
	  get := Intersect(parameters)
	  //<<Compare want and get>>
  })
#+end_src 
#+begin_export latex
We compare the lengths of the slices. Then we test whether each
element of \ty{want} is contained in \ty{get}.
#+end_export
#+begin_src go <<Compare want and get>>=
  //<<Compare lengths of want and get>>
  for i := 0; i < minLen; i++ {
	  if !containsData(get, want[i]) {

		  t.Errorf("\nwant:'%v' is absent " +
			  "from results:\n%v\n",
			  want[i].Header(),
			  string(want[i].Data()))

		  t.Errorf("\nget: '%v'\n%v\n",
			  get[i].Header(),
			  string(get[i].Data()))
	  }}
#+end_src
#+begin_export latex
We compare the number of elements in the slices, as well as the total
number of bytes they contain. We also determine the length of the
shortest slice.
#+end_export
#+begin_src go <<Compare lengths of want and get>>=
  wL := len(want)
  gL := len(get)
  minLen := gL
  if gL != wL {
	  t.Errorf("\nthe result has %d sequences, expected %d",
		  gL, wL)
	  if wL < gL {
		  minLen = wL
	  }

  }
  wConcat, _ := fastautils.Concatenate(want, 0)
  gConcat, _ := fastautils.Concatenate(get, 0)
  if len(wConcat.Data()) != len(gConcat.Data()) {
	  t.Errorf("\nthe result has %d nucleotides, " +
		  "expected %d",
		  len(gConcat.Data()),
		  len(wConcat.Data()))
  }
#+end_src
#+begin_export latex
The function \ty{containsData} checks if a slice of \ty{fasta} entries
contains an element with the same \ty{Data} as the query \ty{fasta}.
#+end_export
#+begin_src go <<Auxillary functions>>=
  func containsData(slice []*fasta.Sequence,
	  el *fasta.Sequence) bool {
	  for _, item := range slice {
		  if reflect.DeepEqual(item.Data(), el.Data()) {
			  return true
		  }
	  }
	  return false
  }
#+end_src
#+begin_export latex
\subsection{\ty{Intersect}: \textit{E. coli}}
We test the parity of \ty{Intersect} and \ty{phylonium -p} on four
closely related real genomes of \textit{E. coli} O157:H7: two complete
genomes of good quality, one highly fragmented genome, and one genome
that has a lot of ambiguous nucleotides like D, W, or V.

We read the desired output and run the test. After that, we compare
what we want to what we get.
#+end_export
#+begin_src go <<Testing functions>>=
  func TestIntersectEcoli(t *testing.T) {
	  want := readFasta("data/o/ecoli.fasta")
	  t.Run("IntersectEcoli", func(t *testing.T) {		
		  r := readFasta("data/i/ecoli/r.fasta")
		  parameters := Parameters{
			  Reference: r,
			  QueryPaths: []string{
				  "data/i/ecoli/frag.fasta",
				  "data/i/ecoli/good.fasta",
				  "data/i/ecoli/ambi.fasta",
			  },
			  ShustrPval: 0.975,
			  Threshold: 1.0,
			  PrintN: false,
		  }
		  get := Intersect(parameters)
		  //<<Compare want and get>>
	  })
  }
#+end_src

